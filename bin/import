#!/usr/bin/env python3
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
import getopt
import logging
from common import constants as constant
from DBImportOperation import import_operations
from DBImportOperation import etl_operations

def printHelp():
	print ("Options:")
	print ("  --help             Show this help message and exit")
	print ("  -v, --debug        Turn on extensive debug output. This will print passwords in cleartext, so use with caution")
	print ("  -V, --version      Displays the version of DBImport")
	print ("  --skipSqoop        Dont run the sqoop command. Useful when the Parquet files are correct and you need to recreate Hive tables")
	print ("  --ignoreTime       Ignores the start and stop time for the table. Will run outside that window regardless")
	print ("  --resetStage       Starts from the beginning regardless of previous problems")
	print ("  -h [Hive Database], --Hive_DB=[Hive Database]")
	print ("                     Hive database")
	print ("  -t [Hive Table], --Hive_Table=[Hive Table]")
	print ("                     Hive table")
	print ("  -1                 Only run functions up and include the sqoop import.")
	print ("  -2                 Only run functions after sqoop is executed. This is normaly all Hive operations.")
	print ("  -f [Function], --function=[Function]")
	print ("                     Only run the specified function. This is used for debugging and when migrating from")
	print ("                     bash based DBImport scripts. Using a function ignore what ever stage the import is in.")
	print ("                     Use with caution!")
	print ("                     Valid function options are:")
	print ("                     - getSourceTableSchema")
	print ("                     - sqoop")
	print ("                     - createImportTable")
	print ("                     - getSourceTableRowCount")
	print ("                     - getImportTableRowCount")
	print ("                     - getTargetTableRowCount")
	print ("                     - createTargetTable")
	print ("                     - removeHiveLocks")
	print ("                     - truncateTargetTable")
	print ("                     - loadDataFromImportTable")
	print ("                     - createStatistics")
	sys.exit(1)
	
def printBox(messageList):
	# This code is not completed. It was a way to easily create the Ascii boxes used in the import, but we are still using hard-coded boxes. One day.....
	if type(messageList) is not list:
		messageList = [messageList]

	startLine = ""
	stopLine = ""
	maxLength = 0
	for message in messageList:
		if len(message) > maxLength:
			maxLength = len(message)

	for i in range(maxLength):
		startLine += "_"
		stopLine += "_"

	print(startLine)
	for message in messageList:
		if len(message) > maxLength:
			maxLength = len(message)
	print(stopLine)

def main(argv):

	try:
		opts, args = getopt.getopt(argv, "vV12f:h:t:", ["version", "help", "function=", "Hive_DB=", "Hive_Table=", "debug", "skipSqoop", "ignoreTime", "resetStage"])
	except getopt.GetoptError:
		printHelp()

	version = "0.10"
	Hive_DB = None
	Hive_Table = None
	runOnlyFunction = None
	loggingLevel = logging.INFO
	skipSqoop = False
	runPhaseOne = False
	runPhaseTwo = False
	runPhaseThree = False
	displayVersion = False
	ignoreTime = False
	resetStage = False

	if  len(opts) == 0:
		printHelp()

	for opt, arg in opts:
		if opt in ("-h", "--Hive_DB"):
			Hive_DB = arg
		elif opt in ("-t", "--Hive_Table"):
			Hive_Table = arg
		elif opt in ("-v", "--debug"):
			loggingLevel = logging.DEBUG
		elif opt in ("-V", "--version"):
			displayVersion = True
		elif opt == "--skipSqoop":
			skipSqoop = True
		elif opt == "--resetStage":
			resetStage = True
		elif opt == "--ignoreTime":
			ignoreTime = True
		elif opt in ("-f", "--function"):
			runOnlyFunction = arg
		elif opt == "--help":
			printHelp()
		elif opt == "-1":
			runPhaseOne = True
		elif opt == "-2":
			runPhaseTwo = True

	if displayVersion == True:
		print("DBImport version: %s"%(constant.VERSION))
		sys.exit(0)

	if Hive_DB == None or Hive_Table == None:
		printHelp()

	if runPhaseOne == False and runPhaseTwo == False:
		# If nothing is specified we run both stages
		runPhaseOne = True
		runPhaseTwo = True

	if runOnlyFunction != None:
		if runOnlyFunction not in ("getSourceTableSchema", "onlyMain", "sqoop", "createImportTable", "getImportTableRowCount", "getTargetTableRowCount", "createTargetTable", "removeHiveLocks", "truncateTargetTable", "loadDataFromImportTable", "createStatistics", "getSourceTableRowCount"):
			printHelp()

	# Initiate the logging functions with the correct level
	if loggingLevel == logging.DEBUG:
		logging.basicConfig(format='%(levelname)s %(funcName)s - %(message)s', level=loggingLevel)
	else:
		logging.basicConfig(format='%(levelname)s - %(message)s', level=loggingLevel)

	# Font created at http://patorjk.com/software/taag/#p=display&f=Big&t=DBImport%20-%20Import
	sys.stdout.write(u"\u001b[35m")  # Magenta
	sys.stdout.flush()
	print("")
	print(" _____  ____ _____                            _              _____                            _   ")
	print("|  __ \|  _ \_   _|                          | |            |_   _|                          | |  ")
	print("| |  | | |_) || |  _ __ ___  _ __   ___  _ __| |_   ______    | |  _ __ ___  _ __   ___  _ __| |_ ")
	print("| |  | |  _ < | | | '_ ` _ \| '_ \ / _ \| '__| __| |______|   | | | '_ ` _ \| '_ \ / _ \| '__| __|")
	print("| |__| | |_) || |_| | | | | | |_) | (_) | |  | |_            _| |_| | | | | | |_) | (_) | |  | |_ ")
	print("|_____/|____/_____|_| |_| |_| .__/ \___/|_|   \__|          |_____|_| |_| |_| .__/ \___/|_|   \__|")
	print("                            | |                                             | |                   ")
	print("                            |_|                                             |_|                   ")
	sys.stdout.write(u"\u001b[0m")  # Reset
	sys.stdout.flush()
	print("")
	print("Version: %s"%(constant.VERSION))
	print("")
	print("")
	
	# Initiate the master class for all import operations
	import_operation = import_operations.operation(Hive_DB, Hive_Table)
	etl_operation = etl_operations.operation()

	# Get the name of the different phases we are going to execute
	phaseOne = import_operation.import_config.phaseOne 
	phaseTwo = import_operation.import_config.phaseTwo 
	phaseThree = import_operation.import_config.phaseThree 

	print("The following table will be imported")
	print("______________________________________________________________________________")
	print("")
	print("Import Type:          %s"%(import_operation.import_config.import_type))
	print("Import Type Phase1:   %s"%(phaseOne))
	print("Import Type Phase2:   %s"%(phaseTwo))
	print("Import description:   %s"%(import_operation.import_config.import_type_description))
	print("Source hostname:      %s"%(import_operation.import_config.common_config.jdbc_hostname))
	print("Source database type: %s"%(import_operation.import_config.common_config.jdbc_servertype))
	print("Source database:      %s"%(import_operation.import_config.common_config.jdbc_database))
	if import_operation.import_config.source_schema != "-":
		print("Source schema:        %s"%(import_operation.import_config.source_schema))
	print("Source table:         %s"%(import_operation.import_config.source_table))
	print("Hive database:        %s"%(import_operation.import_config.Hive_DB))
	print("Hive table:           %s"%(import_operation.import_config.Hive_Table))
	print("______________________________________________________________________________")
	print("")
	sys.stdout.flush()

	if ( runPhaseOne == True and runPhaseTwo == False ) and runOnlyFunction == None:
		print(" _______________________ ")
		print("|                       |")
		print("| Phase 1 import only   |")
		print("|_______________________|")
		print("")
		print("")

	if ( runPhaseOne == False and runPhaseTwo == True ) and runOnlyFunction == None:
		print(" _______________________ ")
		print("|                       |")
		print("| Phase 2 import only   |")
		print("|_______________________|")
		print("")
		print("")

	if runOnlyFunction != None:
		print(" _______________________________________________________ ")
		print("|                                                       |")
		print("| This is not a full import as a function was specified |") 	
		print("|_______________________________________________________|")
		print("")
		print("")

		import_operation.setStageOnlyInMemory()

	# Check if the configured Hive database exists
	import_operation.checkHiveDB(Hive_DB)

	if ignoreTime == False:
#		# Checking if we are allowed to use the configued JDBC connection at this time
		import_operation.checkTimeWindow()

	if import_operation.import_config.common_config.checkKerberosTicket() == False:
		logging.error("There is no valid Kerberos ticket available. Please create one before running this command")
		import_operation.remove_temporary_files()
		sys.exit(1)

	stage = import_operation.getStage()
	if resetStage == True:
		import_operation.setStage(0, force=True)
		stage = 0

	if stage > 0 and stage < 1000:
		# TODO: Remove this once everything is migrated to python version
		print(" ________________________________________________________ ")
		print("|                                                        |")
		print("| ERROR: Stage information incorrect. Did you run the    |") 	
		print("|        python version of DBImport last time?           |") 	
		print("|________________________________________________________|")
		print("")
		print("")
		import_operation.remove_temporary_files()
		sys.exit(1)

	if runPhaseOne == True and runPhaseTwo == False and ( stage == 1049 or stage == 1149 ):
		print(" ___________________________________ ")
		print("|                                   |")
		print("| Phase 1 is already completed.     |") 
		print("| To continue, run with option '-2' |") 	
		print("|___________________________________|")

		import_operation.remove_temporary_files()
		sys.exit(0)

	# ******************************************
	# * PHASE1_FULL 
	# ******************************************

	if phaseOne == constant.PHASE1_FULL and runPhaseOne == True:
		if stage >= 1000 and stage < 1049:
			import_operation.saveRetryAttempt(stage)

			newStage = 0
			if stage == 1014: newStage = 1011 
			print(" ________________________________________________________ ")
			print("|                                                        |")
			print("| WARNING: The previous import failed and this execution |") 	
			print("|          is recovering from that failure.              |") 	
			print("| Last execution failed on stage %s                    |"%(stage)) 	
			if newStage != 0: 
				print("| Will restart from stage %s                           |"%(newStage)) 	
				import_operation.setStage(newStage, force=True)
			print("|________________________________________________________|")
			print("")
			print("")


		# Fetch the source table schema. This is mandatory for all imports
		if runOnlyFunction == None or runOnlyFunction == "getSourceTableSchema":
			import_operation.setStage(1010)
			if import_operation.getStage() == 1010: 
				import_operation.getSourceTableSchema()

		if runOnlyFunction == None: 
			import_operation.setStage(1011)
			if import_operation.getStage() == 1011: 
				import_operation.clearTableRowCount()

		if runOnlyFunction == None or runOnlyFunction == "getSourceTableRowCount": 
			import_operation.setStage(1012)
			if import_operation.getStage() == 1012: 
				import_operation.getJDBCTableRowCount()
	
		if ( runOnlyFunction == None or runOnlyFunction == "sqoop" ) and skipSqoop == False:
			import_operation.setStage(1013)
			if import_operation.getStage() == 1013: 
				import_operation.runSqoop(False)

			import_operation.setStage(1014)
			if import_operation.getStage() == 1014: 
				import_operation.validateSqoopRowCount()

			import_operation.setStage(1049)


	# ******************************************
	# * PHASE1_FULL & PHASE2_COPY
	# ******************************************

	if phaseOne == constant.PHASE1_FULL and phaseTwo == constant.PHASE2_COPY and runPhaseTwo == True:
		if stage > 0 and stage != 1049:
			import_operation.saveRetryAttempt(stage)

			newStage = 0
			if stage == 1053: newStage = 1050 
			if stage == 1060: newStage = 1054
			print(" ________________________________________________________ ")
			print("|                                                        |")
			print("| WARNING: The previous import failed and this execution |") 	
			print("|          is recovering from that failure.              |") 	
			print("| Last execution failed on stage %s                    |"%(stage)) 	
			if newStage != 0: 
				print("| Will restart from stage %s                           |"%(newStage)) 	
				import_operation.setStage(newStage, force=True)
			print("|________________________________________________________|")
			print("")
			print("")


		if runPhaseOne == False and stage < 1049:
			logging.error("You are trying to import a stage2 only import, but there is no information about a completed stage1")
			logging.error("Please run a stage1 first and make sure it completes successfully")
			import_operation.remove_temporary_files()
			sys.exit(0)

		if runOnlyFunction == None or runOnlyFunction == "createImportTable":
			import_operation.setStage(1050)
			if import_operation.getStage() == 1050: 
				import_operation.connectToHive()

			import_operation.setStage(1051)
			if import_operation.getStage() == 1051: 
				import_operation.connectToHive()
				import_operation.createExternalImportTable()
				import_operation.updateExternalImportTable()

		if runOnlyFunction == None or runOnlyFunction == "getImportTableRowCount":
			import_operation.setStage(1052)
			if import_operation.getStage() == 1052: 
				import_operation.connectToHive()
				import_operation.getImportTableRowCount()

			import_operation.setStage(1053)
			if import_operation.getStage() == 1053: 
				import_operation.validateRowCount()

		if runOnlyFunction == None or runOnlyFunction == "removeHiveLocks":
			import_operation.setStage(1054)
			if import_operation.getStage() == 1054: 
				import_operation.connectToHive()
				import_operation.removeHiveLocks()

		if runOnlyFunction == None or runOnlyFunction == "createTargetTable":
			import_operation.setStage(1055)
			if import_operation.getStage() == 1055: 
				import_operation.connectToHive()
				import_operation.createTargetTable()
				import_operation.updateTargetTable()
				import_operation.updatePKonTargetTable()
				import_operation.updateFKonTargetTable()

		if runOnlyFunction == None or runOnlyFunction == "truncateTargetTable":
			import_operation.setStage(1056)
			if import_operation.getStage() == 1056: 
				import_operation.connectToHive()
				import_operation.truncateTargetTable()
		
		if runOnlyFunction == None or runOnlyFunction == "loadDataFromImportTable":
			import_operation.setStage(1057)
			if import_operation.getStage() == 1057: 
				import_operation.connectToHive()
				import_operation.loadDataFromImportToTargetTable()

			import_operation.setStage(1058)
			if import_operation.getStage() == 1058: 
				import_operation.updateStatisticsOnTargetTable()

		if runOnlyFunction == None or runOnlyFunction == "getTargetTableRowCount":
			import_operation.setStage(1059)
			if import_operation.getStage() == 1059: 
				import_operation.connectToHive()
				import_operation.getTargetTableRowCount()

			import_operation.setStage(1060)
			if import_operation.getStage() == 1060: 
				import_operation.validateRowCount()

		if runOnlyFunction == None:
			import_operation.setStage(9999)

		if runOnlyFunction == None or runOnlyFunction == "createStatistics":
			import_operation.convertStageStatisticsToJSON()
			import_operation.saveStageStatistics()

	# ******************************************
	# * PHASE1_INCR 
	# ******************************************

	if phaseOne == constant.PHASE1_INCR and runPhaseOne == True:
		if stage >= 1100 and stage < 1149:
			import_operation.saveRetryAttempt(stage)

			newStage = 0
			# TODO: Add correct restart points once incremental imports are working
			if stage == 1114: newStage = 1111 
			print(" ________________________________________________________ ")
			print("|                                                        |")
			print("| WARNING: The previous import failed and this execution |") 	
			print("|          is recovering from that failure.              |") 	
			print("| Last execution failed on stage %s                    |"%(stage)) 	
			if newStage != 0: 
				print("| Will restart from stage %s                           |"%(newStage)) 	
				import_operation.setStage(newStage, force=True)
			print("|________________________________________________________|")
			print("")
			print("")

		# Fetch the source table schema. This is mandatory for all imports
		if runOnlyFunction == None or runOnlyFunction == "getSourceTableSchema":
			import_operation.setStage(1110)
			if import_operation.getStage() == 1110: 
				import_operation.getSourceTableSchema()

		if runOnlyFunction == None: 
			import_operation.setStage(1111)
			if import_operation.getStage() == 1111: 
				import_operation.clearTableRowCount()

		if ( runOnlyFunction == None or runOnlyFunction == "sqoop" ) and skipSqoop == False:
			import_operation.setStage(1112)
			if import_operation.getStage() == 1112: 
				import_operation.saveIncrMinValue()
				import_operation.runSqoop(False)
				if import_operation.sqoopIncrNoNewRows == True: 
					import_operation.setStage(1149)

		if runOnlyFunction == None or runOnlyFunction == "getSourceTableRowCount": 
			import_operation.setStage(1113)
			if import_operation.getStage() == 1113: 
				import_operation.getJDBCTableRowCount()
	
		if runOnlyFunction == None:
			import_operation.setStage(1114)
			if import_operation.getStage() == 1114: 
				import_operation.validateSqoopRowCount()

			import_operation.setStage(1149)

	# ******************************************
	# * PHASE1_INCR & PHASE2_COPY
	# ******************************************
	
	if phaseOne == constant.PHASE1_INCR and phaseTwo == constant.PHASE2_COPY and runPhaseTwo == True:
		if stage > 0 and stage != 1149:
			import_operation.saveRetryAttempt(stage)

			newStage = 0
			# TODO: Add correct restart points once incremental imports are working
			if stage == 1153: newStage = 1150 
			print(" ________________________________________________________ ")
			print("|                                                        |")
			print("| WARNING: The previous import failed and this execution |") 	
			print("|          is recovering from that failure.              |") 	
			print("| Last execution failed on stage %s                    |"%(stage)) 	
			if newStage != 0: 
				print("| Will restart from stage %s                           |"%(newStage)) 	
				import_operation.setStage(newStage, force=True)
			print("|________________________________________________________|")
			print("")
			print("")

		if runPhaseOne == False and stage < 1149:
			logging.error("You are trying to import a stage2 only import, but there is no information about a completed stage1")
			logging.error("Please run a stage1 first and make sure it completes successfully")
			import_operation.remove_temporary_files()
			sys.exit(0)

		if runOnlyFunction == None:
			if import_operation.import_config.sqoop_last_rows == 0:
				# As we have passed the sqoop validation, we can assume that if sqoop havent loaded any rows, there is nothing to do in stage2
				import_operation.setStage(1160)

		if runOnlyFunction == None or runOnlyFunction == "createImportTable":
			import_operation.setStage(1150)
			if import_operation.getStage() == 1150: 
				import_operation.connectToHive()

			import_operation.setStage(1151)
			if import_operation.getStage() == 1151: 
				import_operation.connectToHive()
				import_operation.createExternalImportTable()
				import_operation.updateExternalImportTable()

		if runOnlyFunction == None or runOnlyFunction == "getImportTableRowCount":
			import_operation.setStage(1152)
			if import_operation.getStage() == 1152: 
				import_operation.connectToHive()
				import_operation.getImportTableRowCount()

			import_operation.setStage(1153)
			if import_operation.getStage() == 1153: 
				import_operation.validateIncrRowCount()

		if runOnlyFunction == None or runOnlyFunction == "removeHiveLocks":
			import_operation.setStage(1154)
			if import_operation.getStage() == 1154: 
				import_operation.connectToHive()
				import_operation.removeHiveLocks()

		if runOnlyFunction == None or runOnlyFunction == "createTargetTable":
			import_operation.setStage(1155)
			if import_operation.getStage() == 1155: 
				import_operation.connectToHive()
				import_operation.createTargetTable()
				import_operation.updateTargetTable()
				import_operation.updatePKonTargetTable()
				import_operation.updateFKonTargetTable()

		if runOnlyFunction == None or runOnlyFunction == "loadDataFromImportTable":
			import_operation.setStage(1156)
			if import_operation.getStage() == 1156: 
				import_operation.connectToHive()
				import_operation.loadDataFromImportToTargetTable()

			import_operation.setStage(1157)
			if import_operation.getStage() == 1157: 
				import_operation.updateStatisticsOnTargetTable()

		if runOnlyFunction == None or runOnlyFunction == "getTargetTableRowCount":
			import_operation.setStage(1158)
			if import_operation.getStage() == 1158: 
				import_operation.connectToHive()
				import_operation.getTargetTableRowCount()

			import_operation.setStage(1159)
			if import_operation.getStage() == 1159: 
				import_operation.validateRowCount()

		if runOnlyFunction == None:
			import_operation.setStage(1160)
			if import_operation.getStage() == 1160: 
				import_operation.saveIncrPendingValues()

			import_operation.setStage(9999)

		if runOnlyFunction == None or runOnlyFunction == "createStatistics":
			import_operation.convertStageStatisticsToJSON()
			import_operation.saveStageStatistics()

	# ******************************************
	# * PHASE1_FULL & PHASE2_HISTORYAUDIT
	# ******************************************

	if phaseOne == constant.PHASE1_FULL and phaseTwo == constant.PHASE2_HISTORYAUDIT and runPhaseTwo == True:
		if stage > 0 and stage != 1049:
			import_operation.saveRetryAttempt(stage)

			newStage = 0
#			if stage == 1153: newStage = 1150 
			print(" ________________________________________________________ ")
			print("|                                                        |")
			print("| WARNING: The previous import failed and this execution |") 	
			print("|          is recovering from that failure.              |") 	
			print("| Last execution failed on stage %s                    |"%(stage)) 	
			if newStage != 0: 
				print("| Will restart from stage %s                           |"%(newStage)) 	
				import_operation.setStage(newStage, force=True)
			print("|________________________________________________________|")
			print("")
			print("")

		if runPhaseOne == False and stage < 1049:
			logging.error("You are trying to import a stage2 only import, but there is no information about a completed stage1")
			logging.error("Please run a stage1 first and make sure it completes successfully")
			import_operation.remove_temporary_files()
			sys.exit(0)

		if runOnlyFunction == None or runOnlyFunction == "createImportTable":
			import_operation.setStage(1200)
			if import_operation.getStage() == 1200: 
				import_operation.connectToHive()

			import_operation.setStage(1201)
			if import_operation.getStage() == 1201: 
				import_operation.connectToHive()
				import_operation.createExternalImportTable()
				import_operation.updateExternalImportTable()

		if runOnlyFunction == None or runOnlyFunction == "getImportTableRowCount":
			import_operation.setStage(1202)
			if import_operation.getStage() == 1202: 
				import_operation.connectToHive()
				import_operation.getImportTableRowCount()

			import_operation.setStage(1203)
			if import_operation.getStage() == 1203: 
				import_operation.validateRowCount()

		if runOnlyFunction == None or runOnlyFunction == "removeHiveLocks":
			import_operation.setStage(1204)
			if import_operation.getStage() == 1204: 
				import_operation.connectToHive()
				import_operation.removeHiveLocks()

		if runOnlyFunction == None or runOnlyFunction == "createTargetTable":
			import_operation.setStage(1205)
			if import_operation.getStage() == 1205: 
				import_operation.connectToHive()
				import_operation.createTargetTable()
				import_operation.convertHiveTableToACID()
				import_operation.updateTargetTable()
				import_operation.updatePKonTargetTable()
				import_operation.updateFKonTargetTable()

	if import_operation.getStage() == 9999: 
		if runOnlyFunction == None:
			if runPhaseOne == True and runPhaseTwo == False:
				print(" _______________________________________ ")
				print("|                                       |")
				print("| DBImport Phase 1 completed successful |") 	
				print("|_______________________________________|")
			elif runPhaseOne == False and runPhaseTwo == True:
				print(" _______________________________________ ")
				print("|                                       |")
				print("| DBImport Phase 2 completed successful |") 	
				print("|_______________________________________|")
			else:
				print(" _______________________________ ")
				print("|                               |")
				print("| DBImport completed successful |") 	
				print("|_______________________________|")
			print("")

			if runPhaseTwo == True:
				# We can only clear the stage at the end of stage 2. 
				import_operation.clearStage()
#	else:
#		logging.error("This import tool only supports 'full' and 'full_direct' so far. Please use bash version for other imports")
#		import_operation.remove_temporary_files()
#		sys.exit(1)

	import_operation.remove_temporary_files()

if __name__ == "__main__":
	main(sys.argv[1:])

