#!/usr/bin/env python3
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
import getopt
import logging
from DBImportOperation import import_operations
from DBImportConfig import constants as constant

def printHelp():
	print ("Options:")
	print ("  --help             Show this help message and exit")
	print ("  -v, --debug        Turn on extensive debug output. This will print passwords in cleartext, so use with caution")
	print ("  -V, --version      Displays the version of DBImport")
	print ("  --skipSqoop        Dont run the sqoop command. Useful when the Parquet files are correct and you need to recreate Hive tables")
	print ("  -h [Hive Database], --Hive_DB=[Hive Database]")
	print ("                     Hive database")
	print ("  -t [Hive Table], --Hive_Table=[Hive Table]")
	print ("                     Hive table")
	print ("  -1                 Only run functions up and include the sqoop import.")
	print ("  -2                 Only run functions after sqoop is executed. This is normaly all Hive operations.")
	print ("  -f [Function], --function=[Function]")
	print ("                     Only run the specified function. This is used for debugging and when migrating from")
	print ("                     bash based DBImport scripts. Using a function ignore what ever stage the import is in.")
	print ("                     Use with caution!")
	print ("                     Valid function options are:")
	print ("                     - getSourceTableSchema")
	print ("                     - sqoop")
	print ("                     - createImportTable")
	print ("                     - getImportTableRowCount")
	print ("                     - getTargetTableRowCount")
	print ("                     - createTargetTable")
	print ("                     - removeHiveLocks")
	print ("                     - truncateTargetTable")
	print ("                     - loadDataFromImportTable")
	print ("                     - createStatistics")
	sys.exit(1)
	
def printBox(messageList):
	# This code is not completed. It was a way to easily create the Ascii boxes used in the import, but we are still using hard-coded boxes. One day.....
	if type(messageList) is not list:
		messageList = [messageList]

	startLine = ""
	stopLine = ""
	maxLength = 0
	for message in messageList:
		if len(message) > maxLength:
			maxLength = len(message)

	for i in range(maxLength):
		startLine += "_"
		stopLine += "_"

	print(startLine)
	for message in messageList:
		if len(message) > maxLength:
			maxLength = len(message)
	print(stopLine)

def main(argv):

	try:
		opts, args = getopt.getopt(argv, "vV12f:h:t:", ["version", "help", "function=", "Hive_DB=", "Hive_Table=", "debug", "skipSqoop"])
	except getopt.GetoptError:
		printHelp()

	version = "0.10"
	Hive_DB = None
	Hive_Table = None
	runOnlyFunction = None
	loggingLevel = logging.INFO
	skipSqoop = False
	runStageOne = False
	runStageTwo = False
	displayVersion = False

	if  len(opts) == 0:
		printHelp()

	for opt, arg in opts:
		if opt in ("-h", "--Hive_DB"):
			Hive_DB = arg
		elif opt in ("-t", "--Hive_Table"):
			Hive_Table = arg
		elif opt in ("-v", "--debug"):
			loggingLevel = logging.DEBUG
		elif opt in ("-V", "--version"):
			displayVersion = True
		elif opt == "--skipSqoop":
			skipSqoop = True
		elif opt in ("-f", "--function"):
			runOnlyFunction = arg
		elif opt == "--help":
			printHelp()
		elif opt == "-1":
			runStageOne = True
		elif opt == "-2":
			runStageTwo = True

	if displayVersion == True:
		print("DBImport version: %s"%(constant.VERSION))
		sys.exit(0)

	if Hive_DB == None or Hive_Table == None:
		printHelp()

	if runStageOne == False and runStageTwo == False:
		# If nothing is specified we run both stages
		runStageOne = True
		runStageTwo = True

	if runOnlyFunction != None:
		if runOnlyFunction not in ("getSourceTableSchema", "onlyMain", "sqoop", "createImportTable", "getImportTableRowCount", "getTargetTableRowCount", "createTargetTable", "removeHiveLocks", "truncateTargetTable", "loadDataFromImportTable", "createStatistics"):
			printHelp()

	# Initiate the logging functions with the correct level
	if loggingLevel == logging.DEBUG:
		logging.basicConfig(format='%(levelname)s %(funcName)s - %(message)s', level=loggingLevel)
	else:
		logging.basicConfig(format='%(levelname)s - %(message)s', level=loggingLevel)

	# Font created at http://patorjk.com/software/taag/#p=display&f=Big&t=DBImport%20-%20Import
	sys.stdout.write(u"\u001b[35m")  # Magenta
	sys.stdout.flush()
	print("")
	print(" _____  ____ _____                            _              _____                            _   ")
	print("|  __ \|  _ \_   _|                          | |            |_   _|                          | |  ")
	print("| |  | | |_) || |  _ __ ___  _ __   ___  _ __| |_   ______    | |  _ __ ___  _ __   ___  _ __| |_ ")
	print("| |  | |  _ < | | | '_ ` _ \| '_ \ / _ \| '__| __| |______|   | | | '_ ` _ \| '_ \ / _ \| '__| __|")
	print("| |__| | |_) || |_| | | | | | |_) | (_) | |  | |_            _| |_| | | | | | |_) | (_) | |  | |_ ")
	print("|_____/|____/_____|_| |_| |_| .__/ \___/|_|   \__|          |_____|_| |_| |_| .__/ \___/|_|   \__|")
	print("                            | |                                             | |                   ")
	print("                            |_|                                             |_|                   ")
	sys.stdout.write(u"\u001b[0m")  # Reset
	sys.stdout.flush()
	print("")
	print("Version: %s"%(constant.VERSION))
	print("")
	print("")
	
	# Initiate the master class for all import operations
	operation = import_operations.operation(Hive_DB, Hive_Table)

	print("The following table will be imported")
	print("______________________________________________________________________________")
	print("")
	print("Import Type:          %s"%(operation.import_config.import_type))
	print("Import description:   %s"%(operation.import_config.import_type_description))
	print("Source hostname:      %s"%(operation.import_config.common_config.jdbc_hostname))
	print("Source database type: %s"%(operation.import_config.common_config.jdbc_servertype))
	print("Source database:      %s"%(operation.import_config.common_config.jdbc_database))
	if operation.import_config.source_schema != "-":
		print("Source schema:        %s"%(operation.import_config.source_schema))
	print("Source table:         %s"%(operation.import_config.source_table))
	print("Hive database:        %s"%(operation.import_config.Hive_DB))
	print("Hive table:           %s"%(operation.import_config.Hive_Table))
	print("______________________________________________________________________________")
	print("")

	if ( runStageOne == True and runStageTwo == False ) and runOnlyFunction == None:
		print(" _______________________ ")
		print("|                       |")
		print("| Stage 1 import only   |")
		print("|_______________________|")
		print("")
		print("")

	if ( runStageOne == False and runStageTwo == True ) and runOnlyFunction == None:
		print(" _______________________ ")
		print("|                       |")
		print("| Stage 2 import only   |")
		print("|_______________________|")
		print("")
		print("")

	if runOnlyFunction != None:
		print(" _______________________________________________________ ")
		print("|                                                       |")
		print("| This is not a full import as a function was specified |") 	
		print("|_______________________________________________________|")
		print("")
		print("")

		operation.setStageOnlyInMemory()

	# TODO: make sure there is a valid Kerberos key

	# Check if the configured Hive database exists
	operation.checkHiveDB(Hive_DB)

	# Checking if we are allowed to use the configued JDBC connection at this time
	operation.checkTimeWindow()

	stage = operation.getStage()
	if stage > 0 and stage < 1000:
		# TODO: Remove this once everything is migrated to python version
		print(" ________________________________________________________ ")
		print("|                                                        |")
		print("| ERROR: Stage information incorrect. Did you run the    |") 	
		print("|        python version of DBImport last time?           |") 	
		print("|________________________________________________________|")
		print("")
		print("")
		operation.remove_temporary_files()
		sys.exit(1)

	if operation.import_config.import_type == "full" or operation.import_config.import_type == "full_direct": 
		if stage > 0 and stage != 1049:
			operation.saveRetryAttempt(stage)

			newStage = 0
			if stage == 1014: newStage = 1011 
			if stage == 1053: newStage = 1050 
			if stage == 1060: newStage = 1054
			print(" ________________________________________________________ ")
			print("|                                                        |")
			print("| WARNING: The previous import failed and this execution |") 	
			print("|          is recovering from that failure.              |") 	
			print("| Last execution failed on stage %s                    |"%(stage)) 	
			if newStage != 0: 
				print("| Will restart from stage %s                           |"%(newStage)) 	
				operation.setStage(newStage, force=True)
			print("|________________________________________________________|")
			print("")
			print("")


		if runStageOne == True and runStageTwo == False and stage == 1049:
			print(" ___________________________________ ")
			print("|                                   |")
			print("| Stage 1 is already completed.     |") 
			print("| To continue, run with option '-2' |") 	
			print("|___________________________________|")

			operation.remove_temporary_files()
			sys.exit(0)

		if stage == 1049:
			print(" _____________________________ ")
			print("|                             |")
			print("| Stage 2 import is starting  |") 
			print("|_____________________________|")
			print("")
			print("")

		# Fetch the source table schema. This is mandatory for all imports
		if runStageOne == True and (runOnlyFunction == None or runOnlyFunction == "getSourceTableSchema"):
			operation.setStage(1010)
			if operation.getStage() == 1010: 
				operation.getSourceTableSchema()

		if runStageOne == True and runOnlyFunction == None: 
			operation.setStage(1011)
			if operation.getStage() == 1011: 
				operation.clearTableRowCount()

		if runStageOne == True and runOnlyFunction == None: 
			operation.setStage(1012)
			if operation.getStage() == 1012: 
				operation.getJDBCTableRowCount()
	
		if runStageOne == True and (runOnlyFunction == None or runOnlyFunction == "sqoop" ) and skipSqoop == False:
			operation.setStage(1013)
			if operation.getStage() == 1013: 
				operation.runSqoop(False)

			operation.setStage(1014)
			if operation.getStage() == 1014: 
				operation.validateSqoopRowCount()

			operation.setStage(1049)

		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "createImportTable"):
			operation.setStage(1050)
			if operation.getStage() == 1050: 
				operation.connectToHive()

			operation.setStage(1051)
			if operation.getStage() == 1051: 
				# TODO: Log changes and failures
				operation.connectToHive()
				operation.createExternalImportTable()
				operation.updateExternalImportTable()

		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "getImportTableRowCount"):
			operation.setStage(1052)
			if operation.getStage() == 1052: 
				operation.connectToHive()
				operation.getImportTableRowCount()

			operation.setStage(1053)
			if operation.getStage() == 1053: 
				operation.validateRowCount()

		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "removeHiveLocks"):
			operation.setStage(1054)
			if operation.getStage() == 1054: 
				operation.connectToHive()
				operation.removeHiveLocks()

		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "createTargetTable"):
			operation.setStage(1055)
			if operation.getStage() == 1055: 
				operation.connectToHive()
				operation.createTargetTable()
				operation.updateTargetTable()
				operation.updatePKonTargetTable()
				operation.updateFKonTargetTable()
		# TODO: Handle changes in  tables

		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "truncateTargetTable"):
			operation.setStage(1056)
			if operation.getStage() == 1056: 
				operation.connectToHive()
				operation.truncateTargetTable()
		
		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "loadDataFromImportTable"):
			operation.setStage(1057)
			if operation.getStage() == 1057: 
				operation.connectToHive()
				operation.loadDataFromImportToTargetTable()

			operation.setStage(1058)
			if operation.getStage() == 1058: 
				operation.updateStatisticsOnTargetTable()

		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "getTargetTableRowCount"):
			operation.setStage(1059)
			if operation.getStage() == 1059: 
				operation.connectToHive()
				operation.getTargetTableRowCount()

			operation.setStage(1060)
			if operation.getStage() == 1060: 
				operation.validateRowCount()

			operation.setStage(9999)

		if runStageTwo == True and (runOnlyFunction == None or runOnlyFunction == "createStatistics"):
			operation.convertStageStatisticsToJSON()

		if runOnlyFunction == None:
			if runStageOne == True and runStageTwo == False:
				print(" _______________________________________ ")
				print("|                                       |")
				print("| DBImport Stage 1 completed successful |") 	
				print("|_______________________________________|")
			elif runStageOne == False and runStageTwo == True:
				print(" _______________________________________ ")
				print("|                                       |")
				print("| DBImport Stage 2 completed successful |") 	
				print("|_______________________________________|")
			else:
				print(" _______________________________ ")
				print("|                               |")
				print("| DBImport completed successful |") 	
				print("|_______________________________|")
			print("")

			if runStageTwo == True:
				# We can only clear the stage at the end of stage 2. 
				operation.clearStage()

	elif operation.import_config.import_type == "incr": 
		if stage > 0 and stage != 1149:
			operation.saveRetryAttempt(stage)

			newStage = 0
			# TODO: Add correct restart points once incremental imports are working
#			if stage == 1014: newStage = 1011 
#			if stage == 1053: newStage = 1050 
#			if stage == 1060: newStage = 1054
			print(" ________________________________________________________ ")
			print("|                                                        |")
			print("| WARNING: The previous import failed and this execution |") 	
			print("|          is recovering from that failure.              |") 	
			print("| Last execution failed on stage %s                    |"%(stage)) 	
			if newStage != 0: 
				print("| Will restart from stage %s                           |"%(newStage)) 	
				operation.setStage(newStage, force=True)
			print("|________________________________________________________|")
			print("")
			print("")


		if runStageOne == True and runStageTwo == False and stage == 1149:
			print(" ___________________________________ ")
			print("|                                   |")
			print("| Stage 1 is already completed.     |") 
			print("| To continue, run with option '-2' |") 	
			print("|___________________________________|")

			operation.remove_temporary_files()
			sys.exit(0)

		if stage == 1149:
			print(" _____________________________ ")
			print("|                             |")
			print("| Stage 2 import is starting  |") 
			print("|_____________________________|")
			print("")
			print("")

		# Fetch the source table schema. This is mandatory for all imports
		if runStageOne == True and (runOnlyFunction == None or runOnlyFunction == "getSourceTableSchema"):
			operation.setStage(1110)
			if operation.getStage() == 1110: 
				operation.getSourceTableSchema()

		if runStageOne == True and runOnlyFunction == None: 
			operation.setStage(1111)
			if operation.getStage() == 1111: 
				operation.clearTableRowCount()

		if runStageOne == True and (runOnlyFunction == None or runOnlyFunction == "sqoop" ) and skipSqoop == False:
			operation.setStage(1112)
			if operation.getStage() == 1112: 
				operation.runSqoop(False)

		if runStageOne == True and runOnlyFunction == None: 
			operation.setStage(1113)
			if operation.getStage() == 1113: 
				operation.getJDBCTableRowCount(incrValidate=True)
	
			operation.setStage(1114)
			if operation.getStage() == 1114: 
				operation.validateSqoopRowCount()

			operation.setStage(1149)

		if runOnlyFunction == None:
			if runStageOne == True and runStageTwo == False:
				print(" _______________________________________ ")
				print("|                                       |")
				print("| DBImport Stage 1 completed successful |") 	
				print("|_______________________________________|")
			elif runStageOne == False and runStageTwo == True:
				print(" _______________________________________ ")
				print("|                                       |")
				print("| DBImport Stage 2 completed successful |") 	
				print("|_______________________________________|")
			else:
				print(" _______________________________ ")
				print("|                               |")
				print("| DBImport completed successful |") 	
				print("|_______________________________|")
			print("")

	else:
		logging.error("This import tool only supports 'full' and 'full_direct' so far. Please use bash version for other imports")
		operation.remove_temporary_files()
		sys.exit(1)

	operation.remove_temporary_files()

if __name__ == "__main__":
	main(sys.argv[1:])
