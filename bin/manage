#!/usr/bin/env python3
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
import getopt
import logging
from DBImportOperation import import_operations
from DBImportConfig import constants as constant
from DBImportConfig import statistics
from DBImportConfig import common_definitions

def printHelp():
	print ("Options:")
	print ("  --clearImportStage Clear the Import stage. Requires Hive Database and Hive Table paramaters")
	print ("  --encryptCredentials")
	print ("                     Encrypt username and password for a Database Connection. ")
	print ("  --sendJSONstatistics")
	print ("                     Posts the JSON data in the 'json_to_rest' table to the configured REST endpoints")
	print ("  --repairIncrementalImport")
	print ("                     Resets an incremental import by getting the max value for incremental column and set that")
	print ("                     as a starting point for the next import. Requires Hive Database and Hive Table paramaters")
	print ("  --repairAllIncrementalImports")
	print ("                     Resets all incremental import that have an active stage.")
	print ("")
	print ("  -h [Hive Database], --Hive_DB=[Hive Database]")
	print ("                     Hive database")
	print ("  -t [Hive Table], --Hive_Table=[Hive Table]")
	print ("                     Hive table")
	print ("")
	print ("  --help             Show this help message and exit")
	print ("  -v, --debug        Turn on extensive debug output. This will print passwords in cleartext, so use with caution")
	sys.exit(1)
	
def main(argv):

	try:
		opts, args = getopt.getopt(argv, "vh:t:", ["help", "repairAllIncrementalImports", "repairIncrementalImport", "sendJSONstatistics", "encryptCredentials", "clearImportStage", "Hive_DB=", "Hive_Table=", "debug"])
	except getopt.GetoptError:
		printHelp()

	Hive_DB = None
	Hive_Table = None
	operation = None
	loggingLevel = logging.INFO

	if  len(opts) == 0:
		printHelp()

	for opt, arg in opts:
		if opt in ("-h", "--Hive_DB"):
			Hive_DB = arg
		elif opt in ("-t", "--Hive_Table"):
			Hive_Table = arg
		elif opt in ("-v", "--debug"):
			loggingLevel = logging.DEBUG
		elif opt == "--help":
			printHelp()
		elif opt == "--clearImportStage":
			operation = "clearImportStage"
		elif opt == "--encryptCredentials":
			operation = "encryptCredentials"
		elif opt == "--sendJSONstatistics":
			operation = "sendJSONstatistics"
		elif opt == "--repairIncrementalImport":
			operation = "repairIncrementalImport"
		elif opt == "--repairAllIncrementalImports":
			operation = "repairAllIncrementalImports"


	if operation == None:
		printHelp()

	if operation == "clearImportStage" and (Hive_DB == None or Hive_Table == None):
		printHelp()

	if operation == "repairIncrementalImport" and (Hive_DB == None or Hive_Table == None):
		printHelp()

	# Font created at http://patorjk.com/software/taag/#p=display&f=Big&t=DBImport%20-%20setup
	sys.stdout.write(u"\u001b[35m")  # Magenta
	sys.stdout.flush()
	print("")
	print(" _____  ____ _____                            _              __  __                               ")
	print("|  __ \|  _ \_   _|                          | |            |  \/  |                              ")
	print("| |  | | |_) || |  _ __ ___  _ __   ___  _ __| |_   ______  | \  / | __ _ _ __   __ _  __ _  ___  ")
	print("| |  | |  _ < | | | '_ ` _ \| '_ \ / _ \| '__| __| |______| | |\/| |/ _` | '_ \ / _` |/ _` |/ _ \ ")
	print("| |__| | |_) || |_| | | | | | |_) | (_) | |  | |_           | |  | | (_| | | | | (_| | (_| |  __/ ")
	print("|_____/|____/_____|_| |_| |_| .__/ \___/|_|   \__|          |_|  |_|\__,_|_| |_|\__,_|\__, |\___| ")
	print("                            | |                                                        __/ |      ")
	print("                            |_|                                                       |___/       ")
	sys.stdout.write(u"\u001b[0m")  # Reset
	sys.stdout.flush()
	print("")
	print("Version: %s"%(constant.VERSION))
	print("")
	print("")

	# Initiate the logging functions with the correct level
	if loggingLevel == logging.DEBUG:
		logging.basicConfig(format='%(levelname)s %(funcName)s - %(message)s', level=loggingLevel)
	else:
		logging.basicConfig(format='%(levelname)s - %(message)s', level=loggingLevel)

	if operation == "clearImportStage":
		import_operation = import_operations.operation(Hive_DB, Hive_Table)
		import_operation.clearStage()
		logging.info("Stage information cleared for %s.%s"%(Hive_DB, Hive_Table))

		import_operation.remove_temporary_files()

	if operation == "encryptCredentials":
		print("This function will encrypt a username and password for the specified Database Connection. Any previous username/password will be overwritten")
		print("There is no undo function for this, so if you want to cancel, please press Ctrl-C")
		connectionAlias = input("DataBase Connection (dbalias): ")

		common_config = common_definitions.config()
		if common_config.checkConnectionAlias(connectionAlias) == False:
			logging.error("The specified database connection does not exist.")
			sys.exit(1)

		username = input("Username: ")
		password = input("Password: ")
		common_config.encryptUserPassword(connectionAlias, username, password)

	if operation == "sendJSONstatistics":
		statistics.postSQLDataToREST()

	if operation == "repairAllIncrementalImports":
		print("This command will search for incremental tables that have an entry in 'import_stage'. If the entry exists,")
		print("it will fetch the max value from the hive table and update the MySQL database. This value will then be used")
		print("used as the starting point for the next sqoop import.")
		print("")
		answer = input("Are you sure you want to do this? (y/N): ")
#		answer = "y"

		if answer.lower() == "y":
			import_operation = import_operations.operation()
			import_operation.repairAllIncrementalImports()


	if operation == "repairIncrementalImport":
		print("This command will try to repair an incremental import that have come out-of-sync between data in the source table")
		print("and the hive table. The tool will connect to the hive database and read the max value for the column")
		print("that is used for the incremental loads. This value will then be used as the starting point for the next sqoop import")
		print("")
		answer = input("Are you sure you want to do this? (y/N): ")
#		answer = "y"

		if answer.lower() == "y":
			import_operation = import_operations.operation(Hive_DB, Hive_Table)
			import_operation.resetIncrMaxValue()


if __name__ == "__main__":
	main(sys.argv[1:])
